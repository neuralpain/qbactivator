#!/bin/bash

# compile, Version 1.8.7
# Copyright (c) 2023, neuralpain 
# https://github.com/neuralpain/qbactivator
# Compile script for qbactivator

version=$(<VERSION)
name=qbactivator

res=./res
bin=./src/bin
main=./src/main
functions=$main/functions
buildfile=./build/$name
cmd_cache=./cache/cmd.build.cmd
pwsh_cache=./cache/pwsh.build.ps1
zipfile=$name-$version.zip
zipfile2=$name-$version.min.zip
patchfilename=EntClient.dll
patchfile=$bin/ecc/$patchfilename
helpfile=$res/doc/readme.txt

return=compile:
v="1.8.7"

compile() {
  [[ ! -d "./cache" ]] && mkdir cache || rm ./cache/*;

  echo "<# :# DO NOT REMOVE THIS LINE" > $cmd_cache
  echo >> $cmd_cache
  echo ":: qbactivator.cmd, Version $version" >> $cmd_cache
  echo ":: Copyright (c) 2023, neuralpain" >> $cmd_cache
  echo ":: https://github.com/neuralpain/qbactivator" >> $cmd_cache
  echo ":: QuickBooks activation script" >> $cmd_cache
  echo >> $cmd_cache
  echo "@echo off" >> $cmd_cache
  echo "@set \"uivr=$version\"" >> $cmd_cache
  cat $main/main.cmd >> $cmd_cache
  echo >> $cmd_cache
  
  # add instructions
  echo ":qbreadme:">> $cmd_cache
  cat $helpfile >> $cmd_cache
  echo ":qbreadme:" >> $cmd_cache
  echo >> $cmd_cache
  echo "# ---------- powershell script ---------- #>" >> $cmd_cache
  echo >> $cmd_cache

  # add powershell functions
  cat $functions/Header.ps1 > $pwsh_cache; echo >> $pwsh_cache
  cat $functions/InformationDisplay.ps1 >> $pwsh_cache; echo >> $pwsh_cache
  cat $functions/SpeedtestModule.ps1 >> $pwsh_cache; echo >> $pwsh_cache
  cat $functions/LicenseOps.ps1 >> $pwsh_cache; echo >> $pwsh_cache
  cat $functions/Exec-Downloader.ps1 >> $pwsh_cache; echo >> $pwsh_cache
  cat $functions/ClientModuleOps.ps1 >> $pwsh_cache; echo >> $pwsh_cache
  cat $main/Main.ps1 >> $pwsh_cache

  # final compile
  cat $cmd_cache > $buildfile.cmd
  cat $pwsh_cache >> $buildfile.cmd
  echo "$return Build complete."

  # archive for stable release
  [[ $1 == "-a" || $1 == "--archive" ]] && compress
}

compress() {
  cp ./LICENSE ./VERSION $patchfile dist && cd dist 
  ( zip -q $zipfile * && zip -q $zipfile2 * -x $patchfilename *.zip ) || ( echo -e "$return error: Failed to create archive." && return )
  rm ./LICENSE ./VERSION ./$patchfilename
  [[ -f $zipfile ]] && echo -e "$return Archived to \"/dist\""
}

printusage() {
  echo "Usage: compile [OPTION...]"
  echo -e "Compile script for qbactivator\n"
  echo "  -s, --release      Build for stable release"
  echo "  -a, --archive      Archive stable release package"
  echo "  -t, --test [note]  Build unit tests"
  echo "  -C, --clear-all    Delete temporary files and folders"
  echo "  -c, --clear        Clear all unit test builds"
  echo "  -v, --version      Display version number and exit"
  echo "  -h, --help         Display this help message and exit"
  echo -e "\nFor more information, visit\033[0m"
  echo -e "\033[0;32mhttps://github.com/neuralpain/qbactivator\033[0m"
}

printversion() {
  echo -e "Version $v"
}

case "$1" in
  -h|--help) printusage && exit;;
  -v|--verison) printversion && exit;;
  -c|--clear) rm ./build/* &>/dev/null && exit;;
  -C|--clear-all) rm -r ./build ./dist ./cache &>/dev/null && exit;;
  -s|--release) buildfile=./dist/$name-$version
    [[ ! -d "./dist" ]] && mkdir dist || rm ./dist/*;
    compile $2;;
  -t|--test) [[ $# -gt 1 ]] && note=$@ && note=${note/"-t "} && note=${note//" "/-} && note="-$note"
    build="$(date "+%y%m%d.%H%M%S")$note"
    buildfile="$buildfile-$version-beta-Build.$build"
    version="$version-beta [Build $build]"
    [[ ! -d "./build" ]] && mkdir build; compile;;
  *) if [[ "$1" == "" ]]; then echo "$return error: Missing argument."
    else echo -e "$return error: Invalid option '$1'"; fi
    exit
esac

exit
